diff --git a/srunner/autoagents/agent_wrapper.py b/srunner/autoagents/agent_wrapper.py
index 6043ebd..b380e66 100644
--- a/srunner/autoagents/agent_wrapper.py
+++ b/srunner/autoagents/agent_wrapper.py
@@ -13,7 +13,12 @@ from __future__ import print_function
 
 import carla
 
-from srunner.autoagents.sensor_interface import CallBack
+from srunner.autoagents.sensor_interface import (
+    CallBack,
+    SpeedometerReader,
+    StitchCameraReader,
+    CollisionReader
+)
 from srunner.scenariomanager.carla_data_provider import CarlaDataProvider
 
 
@@ -47,38 +52,62 @@ class AgentWrapper(object):
         bp_library = CarlaDataProvider.get_world().get_blueprint_library()
         for sensor_spec in self._agent.sensors():
             # These are the sensors spawned on the carla world
-            bp = bp_library.find(str(sensor_spec['type']))
-            if sensor_spec['type'].startswith('sensor.camera'):
-                bp.set_attribute('image_size_x', str(sensor_spec['width']))
-                bp.set_attribute('image_size_y', str(sensor_spec['height']))
-                bp.set_attribute('fov', str(sensor_spec['fov']))
-                sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'],
-                                                 z=sensor_spec['z'])
-                sensor_rotation = carla.Rotation(pitch=sensor_spec['pitch'],
-                                                 roll=sensor_spec['roll'],
-                                                 yaw=sensor_spec['yaw'])
-            elif sensor_spec['type'].startswith('sensor.lidar'):
-                bp.set_attribute('range', str(sensor_spec['range']))
-                bp.set_attribute('rotation_frequency', str(sensor_spec['rotation_frequency']))
-                bp.set_attribute('channels', str(sensor_spec['channels']))
-                bp.set_attribute('upper_fov', str(sensor_spec['upper_fov']))
-                bp.set_attribute('lower_fov', str(sensor_spec['lower_fov']))
-                bp.set_attribute('points_per_second', str(sensor_spec['points_per_second']))
-                sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'],
-                                                 z=sensor_spec['z'])
-                sensor_rotation = carla.Rotation(pitch=sensor_spec['pitch'],
-                                                 roll=sensor_spec['roll'],
-                                                 yaw=sensor_spec['yaw'])
-            elif sensor_spec['type'].startswith('sensor.other.gnss'):
-                sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'],
-                                                 z=sensor_spec['z'])
-                sensor_rotation = carla.Rotation()
-
-            # create sensor
-            sensor_transform = carla.Transform(sensor_location, sensor_rotation)
-            sensor = CarlaDataProvider.get_world().spawn_actor(bp, sensor_transform, vehicle)
+            if sensor_spec['type'].startswith('sensor.speedometer'):
+                delta_time = CarlaDataProvider.get_world().get_settings().fixed_delta_seconds
+                frame_rate = 1 / delta_time
+                sensor = SpeedometerReader(vehicle, frame_rate)
+            elif sensor_spec['type'].startswith('sensor.stitch_camera'):
+                delta_time = CarlaDataProvider.get_world().get_settings().fixed_delta_seconds
+                frame_rate = 1 / delta_time
+                sensor = StitchCameraReader(bp_library, vehicle, sensor_spec, frame_rate)
+            elif sensor_spec['type'].startswith('sensor.collision'):
+                delta_time = CarlaDataProvider.get_world().get_settings().fixed_delta_seconds
+                frame_rate = 1 / delta_time
+                sensor = CollisionReader(bp_library, vehicle, frame_rate)
+            else:
+                bp = bp_library.find(str(sensor_spec['type']))
+                if sensor_spec['type'].startswith('sensor.camera'):
+                    bp.set_attribute('image_size_x', str(sensor_spec['width']))
+                    bp.set_attribute('image_size_y', str(sensor_spec['height']))
+                    bp.set_attribute('fov', str(sensor_spec['fov']))
+                    sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'],
+                                                     z=sensor_spec['z'])
+                    sensor_rotation = carla.Rotation(pitch=sensor_spec['pitch'],
+                                                     roll=sensor_spec['roll'],
+                                                     yaw=sensor_spec['yaw'])
+                elif sensor_spec['type'].startswith('sensor.lidar'):
+                    bp.set_attribute('range', str(sensor_spec['range']))
+                    bp.set_attribute('rotation_frequency', str(sensor_spec['rotation_frequency']))
+                    bp.set_attribute('channels', str(sensor_spec['channels']))
+                    bp.set_attribute('upper_fov', str(sensor_spec['upper_fov']))
+                    bp.set_attribute('lower_fov', str(sensor_spec['lower_fov']))
+                    bp.set_attribute('points_per_second', str(sensor_spec['points_per_second']))
+                    sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'],
+                                                     z=sensor_spec['z'])
+                    sensor_rotation = carla.Rotation(pitch=sensor_spec['pitch'],
+                                                     roll=sensor_spec['roll'],
+                                                     yaw=sensor_spec['yaw'])
+                elif sensor_spec['type'].startswith('sensor.other.gnss'):
+                    sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'],
+                                                     z=sensor_spec['z'])
+                    sensor_rotation = carla.Rotation()
+                else:
+                    if sensor_spec['type'].startswith('sensor.other.obstacle'):
+                        if 'distance' in sensor_spec:
+                            bp.set_attribute('distance', str(sensor_spec['distance']))
+                        if 'debug_linetrace' in sensor_spec:
+                            bp.set_attribute('debug_linetrace', str(sensor_spec['debug_linetrace']))
+                        if 'hit_radius' in sensor_spec:
+                            bp.set_attribute('hit_radius', str(sensor_spec['hit_radius']))
+                    sensor_location = carla.Location(x=0, y=0, z=0)
+                    sensor_rotation = carla.Rotation()
+
+                # create sensor
+                sensor_transform = carla.Transform(sensor_location, sensor_rotation)
+                sensor = CarlaDataProvider.get_world().spawn_actor(bp, sensor_transform, vehicle)
+
             # setup callback
-            sensor.listen(CallBack(sensor_spec['id'], sensor, self._agent.sensor_interface))
+            sensor.listen(CallBack(sensor_spec['id'], sensor_spec['type'], sensor, self._agent.sensor_interface))
             self._sensors_list.append(sensor)
 
         # Tick once to spawn the sensors
diff --git a/srunner/autoagents/autonomous_agent.py b/srunner/autoagents/autonomous_agent.py
index 31b5ff4..11796e4 100644
--- a/srunner/autoagents/autonomous_agent.py
+++ b/srunner/autoagents/autonomous_agent.py
@@ -90,7 +90,7 @@ class AutonomousAgent(object):
 
         timestamp = GameTime.get_time()
         wallclock = GameTime.get_wallclocktime()
-        print('======[Agent] Wallclock_time = {} / Sim_time = {}'.format(wallclock, timestamp))
+        # print('======[Agent] Wallclock_time = {} / Sim_time = {}'.format(wallclock, timestamp))
 
         control = self.run_step(input_data, timestamp)
         control.manual_gear_shift = False
diff --git a/srunner/autoagents/sensor_interface.py b/srunner/autoagents/sensor_interface.py
index 940b6f7..af11531 100644
--- a/srunner/autoagents/sensor_interface.py
+++ b/srunner/autoagents/sensor_interface.py
@@ -9,7 +9,12 @@ handling the use of sensors for the agents
 """
 
 import copy
+import math
 import logging
+import weakref
+import numpy as np
+import time
+from threading import Thread
 
 try:
     from queue import Queue
@@ -18,17 +23,371 @@ except ImportError:
     from Queue import Queue
     from Queue import Empty
 
-import numpy as np
 
 import carla
+from srunner.scenariomanager.carla_data_provider import CarlaDataProvider
+from srunner.scenariomanager.timer import GameTime
 
+from pdb import set_trace as breakpoint # DEBUG. TODO!
+
+
+def threaded(fn):
+    def wrapper(*args, **kwargs):
+        thread = Thread(target=fn, args=args, kwargs=kwargs)
+        thread.setDaemon(True)
+        thread.start()
+
+        return thread
+    return wrapper
 
-class SensorReceivedNoData(Exception):
 
+class SensorReceivedNoData(Exception):
     """
     Exceptions thrown when the sensors used by the agent take too long to receive data
     """
 
+    def __init__(self, message):
+        super(SensorReceivedNoData, self).__init__(message)
+
+
+class GenericMeasurement(object):
+    def __init__(self, data, frame):
+        self.data = data
+        self.frame = frame
+
+
+class StitchCameraReader:
+    def __init__(self, bp_library, vehicle, sensor_spec, reading_frequency=1.0):
+        
+        # SISL: Added (to recreate StitchCameraReader)
+        self._bp_library = bp_library
+        self._vehicle = vehicle
+        self._sensor_spec = sensor_spec
+        self._reading_frequency = reading_frequency
+
+        fov = int(sensor_spec['fov'])
+        # Hack
+        self.yaws = [('left', -fov+5), ('center', 0), ('right', fov-5)]
+        self.sensor_type = 'sensor.camera.'+str(sensor_spec['type'].split('.')[-1])
+
+        bp = bp_library.find(self.sensor_type)
+        
+        bp.set_attribute('image_size_x', str(sensor_spec['width']))
+        bp.set_attribute('image_size_y', str(sensor_spec['height']))
+        bp.set_attribute('fov', str(sensor_spec['fov']))
+        bp.set_attribute('lens_circle_multiplier', str(3.0))
+        bp.set_attribute('lens_circle_falloff', str(3.0))
+        if 'rgb' in sensor_spec['type']:
+            bp.set_attribute('chromatic_aberration_intensity', str(0.5))
+            bp.set_attribute('chromatic_aberration_offset', str(0))
+
+        self.type_id = 'sensor.stitch_camera.rgb' # SISL: Added.
+        self.sensors = []
+        self.datas = {}
+        
+        sensor_location = carla.Location(x=sensor_spec['x'], y=sensor_spec['y'], z=sensor_spec['z'])
+        for prefix, yaw in self.yaws:
+            sensor_rotation = carla.Rotation(
+                pitch=sensor_spec['pitch'],
+                roll=sensor_spec['roll'],
+                yaw=sensor_spec['yaw']+yaw
+            )
+        
+            sensor = CarlaDataProvider.get_world().spawn_actor(bp, carla.Transform(sensor_location, sensor_rotation), vehicle)
+            sensor.listen(self.__class__.on_camera_func(weakref.ref(self), prefix))
+            self.sensors.append(sensor)
+            
+            
+        self._reading_frequency = reading_frequency
+        self._callback = None
+
+        self._run_ps = True
+        self.run()
+            
+    @staticmethod
+    def on_camera_func(weakself, prefix):
+        def on_camera(event):
+            self = weakself()
+            array = np.frombuffer(event.raw_data, dtype=np.dtype("uint8"))
+            array = copy.deepcopy(array)
+            array = np.reshape(array, (event.height, event.width, 4))
+
+            self.datas[prefix] = array[...,2] if 'semantic' in self.sensor_type else array[...,:3]
+
+        return on_camera
+
+    def ready(self):
+        for prefix, _ in self.yaws:
+            if prefix not in self.datas:
+                return False
+        
+        return True
+    
+    @property
+    def stitched(self):
+        images = []
+        for prefix, _ in self.yaws:
+            images.append(self.datas[prefix])
+        
+        return np.concatenate(images, axis=1)
+    
+    @threaded
+    def run(self):
+        first_time = True
+        latest_time = GameTime.get_time()
+        while self._run_ps:
+            if self._callback is not None:
+                
+                if not self.ready():
+                    continue
+                    
+                current_time = GameTime.get_time()
+                
+                # Second part forces the sensors to send data at the first tick, regardless of frequency
+                if current_time - latest_time > (1 / self._reading_frequency) \
+                        or (first_time and GameTime.get_frame() != 0):
+                    self._callback(GenericMeasurement(self.stitched, GameTime.get_frame()))
+                    latest_time = GameTime.get_time()
+                    first_time = False
+                else:
+                    time.sleep(0.001)
+
+    def listen(self, callback):
+        # Tell that this function receives what the producer does.
+        self._run_ps = True # SISL: Added (important when we stop the sensor, that we indicate to start it again when calling `listen`)
+        self._callback = callback
+
+    def stop(self):
+        self._run_ps = False
+    
+    def destroy(self):
+        self._run_ps = False
+        for sensor in self.sensors:
+            sensor.destroy()
+        
+        self.datas.clear()
+
+
+class CollisionReader:
+    def __init__(self, bp_library, vehicle, reading_frequency=1.0):
+        self._collided = False
+        self._intensity = -1
+        self.type_id = 'sensor.other.collision'
+        bp = bp_library.find(self.type_id)
+        self.sensor = CarlaDataProvider.get_world().spawn_actor(bp, carla.Transform(), vehicle)
+        self.sensor.listen(lambda event: self.__class__.on_collision(weakref.ref(self), event))
+
+        self._reading_frequency = reading_frequency
+        self._callback = None
+        self._run_ps = True
+        self.run()
+
+    @threaded
+    def run(self):
+        first_time = True
+        latest_time = GameTime.get_time()
+        while self._run_ps:
+            if self._callback is not None:
+                current_time = GameTime.get_time()
+
+                # Second part forces the sensors to send data at the first tick, regardless of frequency
+                if current_time - latest_time > (1 / self._reading_frequency) \
+                        or (first_time and GameTime.get_frame() != 0):
+                    self._callback(GenericMeasurement(self._collided, GameTime.get_frame()))
+                    latest_time = GameTime.get_time()
+                    first_time = False
+                else:
+                    time.sleep(0.001)
+
+    def listen(self, callback):
+        # Tell that this function receives what the producer does.
+        self._callback = callback
+
+    def stop(self):
+        self._run_ps = False
+
+    def destroy(self):
+        self._run_ps = False
+        self.sensor.destroy()
+
+    @staticmethod
+    def on_collision(weakself, data):
+        self = weakself()
+        self._collided = True
+        impulse = data.normal_impulse
+        self._intensity = math.sqrt(impulse.x ** 2 + impulse.y ** 2 + impulse.z ** 2)
+
+
+class ObstacleReader:
+    def __init__(self, bp_library, vehicle, reading_frequency=1.0):
+        self._obstacle_distance = 999999999 # float('inf') TODO
+        self._obstacle_actor = None
+        self.type_id = 'sensor.other.obstacle'
+        bp = bp_library.find(self.type_id)
+        # bp.set_attribute('distance', '1000')
+        self.sensor = CarlaDataProvider.get_world().spawn_actor(bp, carla.Transform(), vehicle)
+        self._callback = lambda event: self.__class__.on_obstacle(weakref.ref(self), event)
+        self.sensor.listen(self._callback)
+
+        self._reading_frequency = reading_frequency
+        # self._callback = None
+        self._run_ps = True
+        self.run()
+
+    @threaded
+    def run(self):
+        first_time = True
+        latest_time = GameTime.get_time()
+        while self._run_ps:
+            if self._callback is not None:
+                current_time = GameTime.get_time()
+
+                # Second part forces the sensors to send data at the first tick, regardless of frequency
+                if current_time - latest_time > (1 / self._reading_frequency) \
+                        or (first_time and GameTime.get_frame() != 0):
+                    self._callback(GenericMeasurement(self._obstacle_distance, GameTime.get_frame()))
+                    latest_time = GameTime.get_time()
+                    first_time = False
+                else:
+                    time.sleep(0.001)
+
+    def listen(self, callback):
+        # Tell that this function receives what the producer does.
+        self._run_ps = True
+        self._callback = callback
+
+    def stop(self):
+        self._run_ps = False
+        # pass
+
+    def destroy(self):
+        self._run_ps = False
+        self.sensor.destroy()
+
+    @staticmethod
+    def on_obstacle(weakself, data):
+        """
+        Callback for the obstacle sensor
+
+        Sets _obstacle_distance and _obstacle_actor according to the closest obstacle
+        found by the sensor.
+        """
+        self = weakself()
+        print("ON OBSTACLE:", data)
+        print("    DIRS:", dir(data))
+        print("    DISTANCE:", data)
+        breakpoint()
+
+        if not data:
+            return
+        self._obstacle_distance = data.distance
+        self._obstacle_actor = data.other_actor
+
+
+class BaseReader(object):
+    def __init__(self, vehicle, reading_frequency=1.0):
+        self._vehicle = vehicle
+        self._reading_frequency = reading_frequency
+        self._callback = None
+        self._run_ps = True
+        self.run()
+
+    def __call__(self):
+        pass
+
+    @threaded
+    def run(self):
+        first_time = True
+        latest_time = GameTime.get_time()
+        while self._run_ps:
+            if self._callback is not None:
+                current_time = GameTime.get_time()
+
+                # Second part forces the sensors to send data at the first tick, regardless of frequency
+                if current_time - latest_time > (1 / self._reading_frequency) \
+                        or (first_time and GameTime.get_frame() != 0):
+                    self._callback(GenericMeasurement(self.__call__(), GameTime.get_frame()))
+                    latest_time = GameTime.get_time()
+                    first_time = False
+
+                else:
+                    time.sleep(0.001)
+
+    def listen(self, callback):
+        # Tell that this function receives what the producer does.
+        self._callback = callback
+
+    def stop(self):
+        self._run_ps = False
+
+    def destroy(self):
+        self._run_ps = False
+
+
+class SpeedometerReader(BaseReader):
+    """
+    Sensor to measure the speed of the vehicle.
+    """
+    MAX_CONNECTION_ATTEMPTS = 10
+
+    def __init__(self, vehicle, reading_frequency=1.0):
+        super().__init__(vehicle, reading_frequency)
+        self.type_id = 'sensor.speedometer' # SISL: Added
+
+    def _get_forward_speed(self, transform=None, velocity=None):
+        """ Convert the vehicle transform directly to forward speed """
+        if not velocity:
+            velocity = self._vehicle.get_velocity()
+        if not transform:
+            transform = self._vehicle.get_transform()
+
+        vel_np = np.array([velocity.x, velocity.y, velocity.z])
+        pitch = np.deg2rad(transform.rotation.pitch)
+        yaw = np.deg2rad(transform.rotation.yaw)
+        orientation = np.array([np.cos(pitch) * np.cos(yaw), np.cos(pitch) * np.sin(yaw), np.sin(pitch)])
+        speed = np.dot(vel_np, orientation)
+        return speed
+        
+    def _get_location(self, transform=None):
+        if not transform:
+            transform = self._vehicle.get_transform()
+        
+        loc = transform.location
+        return [loc.x, loc.y, loc.z]
+    
+    def _get_rotation(self, transform=None):
+        if not transform:
+            transform = self._vehicle.get_transform()
+        
+        rot = transform.rotation
+        return [rot.roll, rot.pitch, rot.yaw]
+        
+    def _get_red_light(self):
+        return str(self._vehicle.get_traffic_light_state()) != 'Green'
+
+    def __call__(self):
+        """ We convert the vehicle physics information into a convenient dictionary """
+
+        # protect this access against timeout
+        attempts = 0
+        while attempts < self.MAX_CONNECTION_ATTEMPTS:
+            try:
+                velocity = self._vehicle.get_velocity()
+                transform = self._vehicle.get_transform()
+                lights_list = CarlaDataProvider.get_world().get_actors().filter("*traffic_light*")
+                break
+            except Exception:
+                attempts += 1
+                time.sleep(0.2)
+                continue
+
+        return {
+            'speed': self._get_forward_speed(transform=transform, velocity=velocity),
+            'loc': self._get_location(transform=transform),
+            'rot': self._get_rotation(transform=transform),
+            # 'red': self._get_red_light(),
+        }
+
 
 class CallBack(object):
 
@@ -36,14 +395,14 @@ class CallBack(object):
     Class the sensors listen to in order to receive their data each frame
     """
 
-    def __init__(self, tag, sensor, data_provider):
+    def __init__(self, tag, sensor_type, sensor, data_provider):
         """
         Initializes the call back
         """
         self._tag = tag
         self._data_provider = data_provider
 
-        self._data_provider.register_sensor(tag, sensor)
+        self._data_provider.register_sensor(tag, sensor_type, sensor)
 
     def __call__(self, data):
         """
@@ -59,6 +418,10 @@ class CallBack(object):
             self._parse_gnss_cb(data, self._tag)
         elif isinstance(data, carla.IMUMeasurement):
             self._parse_imu_cb(data, self._tag)
+        elif isinstance(data, GenericMeasurement):
+            self._parse_pseudosensor(data, self._tag)
+        elif isinstance(data, carla.ObstacleDetectionEvent):
+            self._parse_obstacle_cb(data, self._tag)
         else:
             logging.error('No callback method for this sensor.')
 
@@ -115,6 +478,16 @@ class CallBack(object):
                           ], dtype=np.float64)
         self._data_provider.update_sensor(tag, array, imu_data.frame)
 
+    def _parse_pseudosensor(self, package, tag):
+        self._data_provider.update_sensor(tag, package.data, package.frame)
+
+    def _parse_obstacle_cb(self, obstacle_data, tag):
+        """
+        parses obstacle sensors
+        """
+        array = np.array([obstacle_data.distance], dtype=np.float64)
+        self._data_provider.update_sensor(tag, array, obstacle_data.frame)
+
 
 class SensorInterface(object):
 
@@ -130,7 +503,11 @@ class SensorInterface(object):
         self._new_data_buffers = Queue()
         self._queue_timeout = 10
 
-    def register_sensor(self, tag, sensor):
+        # Event-based sensors doesn't get the data on tick, need special treatment
+        self._event_based_tags = []
+
+
+    def register_sensor(self, tag, sensor_type, sensor):
         """
         Registers the sensors
         """
@@ -139,6 +516,9 @@ class SensorInterface(object):
 
         self._sensors_objects[tag] = sensor
 
+        if sensor_type == 'sensor.other.obstacle' or sensor_type == 'sensor.other.collision':
+            self._event_based_tags.append(tag)
+
     def update_sensor(self, tag, data, timestamp):
         """
         Updates the sensor
@@ -156,6 +536,15 @@ class SensorInterface(object):
             data_dict = {}
             while len(data_dict.keys()) < len(self._sensors_objects.keys()):
 
+                # Don't wait for the obstacle sensor
+                signal_break = False
+                for event_based_tag in self._event_based_tags:
+                    if event_based_tag and event_based_tag not in data_dict.keys() \
+                            and any([len(self._sensors_objects.keys()) == len(data_dict.keys()) + i for i in range(len(self._event_based_tags)+1)]):
+                        signal_break = True
+                if signal_break:
+                    break
+
                 sensor_data = self._new_data_buffers.get(True, self._queue_timeout)
                 data_dict[sensor_data[0]] = ((sensor_data[1], sensor_data[2]))
 
diff --git a/srunner/scenarioconfigs/scenario_configuration.py b/srunner/scenarioconfigs/scenario_configuration.py
index 388a7d2..41b3a95 100644
--- a/srunner/scenarioconfigs/scenario_configuration.py
+++ b/srunner/scenarioconfigs/scenario_configuration.py
@@ -84,3 +84,4 @@ class ScenarioConfiguration(object):
     friction = None
     subtype = None
     route_var_name = None
+    other_actor_type = None
diff --git a/srunner/scenariomanager/scenarioatomics/atomic_criteria.py b/srunner/scenariomanager/scenarioatomics/atomic_criteria.py
index 35aa46b..cd5936d 100644
--- a/srunner/scenariomanager/scenarioatomics/atomic_criteria.py
+++ b/srunner/scenariomanager/scenarioatomics/atomic_criteria.py
@@ -312,6 +312,7 @@ class CollisionTest(Criterion):
         blueprint = world.get_blueprint_library().find('sensor.other.collision')
         self._collision_sensor = world.spawn_actor(blueprint, carla.Transform(), attach_to=self.actor)
         self._collision_sensor.listen(lambda event: self._count_collisions(weakref.ref(self), event))
+        self.collision_intensity = None
 
         self.other_actor = other_actor
         self.other_actor_type = other_actor_type
@@ -431,6 +432,9 @@ class CollisionTest(Criterion):
         self.registered_collisions.append(actor_location)
         self.list_traffic_events.append(collision_event)
 
+        impulse = event.normal_impulse
+        self.collision_intensity = math.sqrt(impulse.x**2 + impulse.y**2 + impulse.z**2)
+
         # Number 0: static objects -> ignore it
         if event.other_actor.id != 0:
             self.last_id = event.other_actor.id
diff --git a/srunner/scenarios/follow_leading_vehicle.py b/srunner/scenarios/follow_leading_vehicle.py
index b4c6d05..ee86baf 100644
--- a/srunner/scenarios/follow_leading_vehicle.py
+++ b/srunner/scenarios/follow_leading_vehicle.py
@@ -100,7 +100,11 @@ class FollowLeadingVehicle(BasicScenario):
                            self._other_actor_transform.location.y,
                            self._other_actor_transform.location.z - 500),
             self._other_actor_transform.rotation)
-        first_vehicle = CarlaDataProvider.request_new_actor('vehicle.nissan.patrol', first_vehicle_transform)
+        if config.other_actor_type is None:
+            other_actor_type = 'vehicle.audi.tt'
+        else:
+            other_actor_type = config.other_actor_type
+        first_vehicle = CarlaDataProvider.request_new_actor(other_actor_type, first_vehicle_transform)
         first_vehicle.set_simulate_physics(enabled=False)
         self.other_actors.append(first_vehicle)
 
@@ -237,8 +241,12 @@ class FollowLeadingVehicleWithObstacle(BasicScenario):
             carla.Rotation(second_actor_waypoint.transform.rotation.pitch, yaw_1,
                            second_actor_waypoint.transform.rotation.roll))
 
+        if config.other_actor_type is None:
+            other_actor_type = 'vehicle.audi.tt'
+        else:
+            other_actor_type = config.other_actor_type
         first_actor = CarlaDataProvider.request_new_actor(
-            'vehicle.nissan.patrol', first_actor_transform)
+            other_actor_type, first_actor_transform)
         second_actor = CarlaDataProvider.request_new_actor(
             'vehicle.diamondback.century', second_actor_transform)
 
diff --git a/srunner/scenarios/object_crash_intersection.py b/srunner/scenarios/object_crash_intersection.py
index a1c3037..6cdcfb8 100644
--- a/srunner/scenarios/object_crash_intersection.py
+++ b/srunner/scenarios/object_crash_intersection.py
@@ -499,9 +499,13 @@ class VehicleTurningRoute(BasicScenario):
 
             # Try to spawn the actor
             try:
+                if config.other_actor_type is None:
+                    other_actor_type = 'vehicle.diamondback.century'
+                else:
+                    other_actor_type = config.other_actor_type
                 self._other_actor_transform = get_opponent_transform(added_dist, waypoint, self._trigger_location)
                 first_vehicle = CarlaDataProvider.request_new_actor(
-                    'vehicle.diamondback.century', self._other_actor_transform)
+                    other_actor_type, self._other_actor_transform)
                 first_vehicle.set_simulate_physics(enabled=False)
                 break
 
diff --git a/srunner/scenarios/object_crash_vehicle.py b/srunner/scenarios/object_crash_vehicle.py
index e540e97..a30823a 100644
--- a/srunner/scenarios/object_crash_vehicle.py
+++ b/srunner/scenarios/object_crash_vehicle.py
@@ -155,7 +155,12 @@ class DynamicObjectCrossing(BasicScenario):
         self._other_actor_target_velocity = 5
         self._other_actor_max_brake = 1.0
         self._time_to_reach = 10
-        self._adversary_type = adversary_type  # flag to select either pedestrian (False) or cyclist (True)
+        if config.other_actor_type == "vehicle.diamondback.century":
+            self._adversary_type = True
+        elif config.other_actor_type == "walker.pedestrian.0001":
+            self._adversary_type = False
+        else:
+            self._adversary_type = adversary_type  # flag to select either pedestrian (False) or cyclist (True)
         self._walker_yaw = 0
         self._num_lane_changes = 1
         self.transform = None
diff --git a/srunner/scenarios/other_leading_vehicle.py b/srunner/scenarios/other_leading_vehicle.py
index fb6da7e..c00cf76 100644
--- a/srunner/scenarios/other_leading_vehicle.py
+++ b/srunner/scenarios/other_leading_vehicle.py
@@ -78,9 +78,12 @@ class OtherLeadingVehicle(BasicScenario):
                                                   first_vehicle_waypoint.transform.rotation)
         second_vehicle_transform = carla.Transform(second_vehicle_waypoint.transform.location,
                                                    second_vehicle_waypoint.transform.rotation)
-
-        first_vehicle = CarlaDataProvider.request_new_actor('vehicle.nissan.patrol', first_vehicle_transform)
-        second_vehicle = CarlaDataProvider.request_new_actor('vehicle.audi.tt', second_vehicle_transform)
+        if config.other_actor_type is None:
+            other_actor_type = 'vehicle.audi.tt'
+        else:
+            other_actor_type = config.other_actor_type
+        first_vehicle = CarlaDataProvider.request_new_actor(other_actor_type, first_vehicle_transform)
+        second_vehicle = CarlaDataProvider.request_new_actor(other_actor_type, second_vehicle_transform)
 
         self.other_actors.append(first_vehicle)
         self.other_actors.append(second_vehicle)
diff --git a/srunner/scenarios/route_scenario.py b/srunner/scenarios/route_scenario.py
index 753da81..2cc4a1c 100644
--- a/srunner/scenarios/route_scenario.py
+++ b/srunner/scenarios/route_scenario.py
@@ -335,6 +335,7 @@ class RouteScenario(BasicScenario):
             scenario_configuration.ego_vehicles = [ActorConfigurationData('vehicle.lincoln.mkz_2017',
                                                                           ego_vehicle.get_transform(),
                                                                           'hero')]
+            scenario_configuration.other_actor_type = definition['other_actor_type']
             route_var_name = "ScenarioRouteNumber{}".format(scenario_number)
             scenario_configuration.route_var_name = route_var_name
 
diff --git a/srunner/tools/route_parser.py b/srunner/tools/route_parser.py
index 18899a5..d27fd79 100644
--- a/srunner/tools/route_parser.py
+++ b/srunner/tools/route_parser.py
@@ -285,6 +285,11 @@ class RouteParser(object):
                 if "scenario_type" not in scenario:
                     break
                 scenario_name = scenario["scenario_type"]
+                if 'other_actor_type' in scenario:
+                    other_actor_type = scenario['other_actor_type']
+                else:
+                    other_actor_type = None
+                scenario_name = scenario["scenario_type"]
                 for event in scenario["available_event_configurations"]:
                     waypoint = event['transform']  # trigger point of this scenario
                     RouteParser.convert_waypoint_float(waypoint)
@@ -306,6 +311,7 @@ class RouteParser(object):
                         scenario_description = {
                             'name': scenario_name,
                             'other_actors': other_vehicles,
+                            'other_actor_type': other_actor_type,
                             'trigger_position': waypoint,
                             'scenario_type': scenario_subtype,  # some scenarios have route dependent configs
                         }
